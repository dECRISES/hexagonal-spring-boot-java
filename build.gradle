buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    ext {
        ver = [
                cucumber                  : '5.6.0',
                lombok                    : '1.18.12',
                springBoot                : '2.2.6.RELEASE',
                springdoc                 : '1.3.0',
                archUnit                  : '1.1.0',
                springDependencyManagement: '1.0.9.RELEASE',
                findbugsJsr305            : '3.0.2',
                jacoco                    : '0.8.5'
        ]
    }

    dependencies {
        classpath group: 'io.spring.gradle', name: 'dependency-management-plugin', version: ver.springDependencyManagement
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: ver.springBoot
        classpath group: 'com.societegenerale.commons', name: 'arch-unit-gradle-plugin', version: ver.archUnit
    }
}

allprojects {
    group = 'org.dfm'
    version = '1.0-SNAPSHOT'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    apply plugin: 'jacoco'
    apply plugin: 'base'

    jacoco {
        toolVersion = ver.jacoco
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'com.societegenerale.commons.plugin.gradle.ArchUnitGradlePlugin'
    apply from: "$rootDir/gradle/jacoco.gradle"

    dependencies {
        implementation group: 'com.google.code.findbugs', name: 'jsr305', version: ver.findbugsJsr305
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
        testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine'
        testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher'
        testImplementation group: 'org.junit.platform', name: 'junit-platform-runner'
        testImplementation group: 'org.junit.platform', name: 'junit-platform-engine'
        testImplementation group: 'org.junit.platform', name: 'junit-platform-commons'
        testImplementation group: 'org.mockito', name: 'mockito-core'
        testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter'
        testImplementation group: 'io.cucumber', name: 'cucumber-java8', version: ver.cucumber
        testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: ver.cucumber
        testImplementation group: 'io.cucumber', name: 'cucumber-spring', version: ver.cucumber
        testImplementation group: 'org.assertj', name: 'assertj-core'
        compileOnly group: 'org.projectlombok', name: 'lombok', version: ver.lombok
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: ver.lombok
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: ver.lombok
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:2.2.6.RELEASE")
        }
    }

    sourceCompatibility = JavaVersion.VERSION_11

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
        finalizedBy(project.tasks.jacocoTestReport)
    }

    archUnit {

        preConfiguredRules = ["com.societegenerale.commons.plugin.rules.NoInjectedFieldTest",
                              "com.societegenerale.commons.plugin.rules.NoAutowiredFieldTest",
                              "com.societegenerale.commons.plugin.rules.NoTestIgnoreWithoutCommentRuleTest",
                              "com.societegenerale.commons.plugin.rules.NoPrefixForInterfacesRuleTest",
                              "com.societegenerale.commons.plugin.rules.NoPowerMockRuleTest",
                              "com.societegenerale.commons.plugin.rules.NoJodaTimeRuleTest",
                              "com.societegenerale.commons.plugin.rules.NoJunitAssertRuleTest",
                              "com.societegenerale.commons.plugin.rules.HexagonalArchitectureTest",
                              "com.societegenerale.commons.plugin.rules.DontReturnNullCollectionTest"
        ]

        configurableRules = [configurableRule("com.tngtech.archunit.library.GeneralCodingRules", applyOn("de.gefa.packageName", "main"))]
    }
}

// Credits: https://gist.github.com/tsjensen/d8b9ab9e6314ae2f63f4955c44399dad
def getProjectList() {
    subprojects + project
}

task jacocoMerge(type: JacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Merge the JaCoCo data files from all subprojects into one'
    project.afterEvaluate {  // do it at the end of the config phase to be sure all information is present
        FileCollection execFiles = project.objects.fileCollection()   // an empty FileCollection
        getProjectList().each { Project subproject ->
            if (subproject.pluginManager.hasPlugin('jacoco')) {
                def testTasks = subproject.tasks.withType(Test)
                dependsOn(testTasks)   // ensure that .exec files are actually present

                testTasks.each { Test task ->
                    // The JacocoTaskExtension is the source of truth for the location of the .exec file.
                    JacocoTaskExtension extension = task.getExtensions().findByType(JacocoTaskExtension.class);
                    if (extension != null) {
                        execFiles.from extension.getDestinationFile()
                    }
                }
            }
        }
        executionData = execFiles
    }
    doFirst {
        // .exec files might be missing if a project has no tests. Filter in execution phase.
        executionData = executionData.filter { it.canRead() }
    }
}

def getReportTasks(JacocoReport pRootTask) {
    getProjectList().collect {
        it.tasks.withType(JacocoReport).findAll { it != pRootTask }
    }.flatten()
}

task jacocoRootReport(type: JacocoReport, dependsOn: tasks.jacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Generates an aggregate report from all subprojects'

    logger.lifecycle 'Using aggregated file: ' + tasks.jacocoMerge.destinationFile
    executionData.from tasks.jacocoMerge.destinationFile

    project.afterEvaluate {
        // The JacocoReport tasks are the source of truth for class files and sources.
        def reportTasks = getReportTasks(tasks.jacocoRootReport)
        classDirectories.from project.files({
            reportTasks.collect { it.classDirectories }.findAll { it != null }
        })
        sourceDirectories.from project.files({
            reportTasks.collect { it.sourceDirectories }.findAll { it != null }
        })
    }

    reports {
        xml.enabled true
    }
}

clean {
    delete "${projectDir}/build"
}
